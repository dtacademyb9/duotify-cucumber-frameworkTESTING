For Cucumber framework we will need the following 3 dependencies:
cucumber-java, cucumber-core, cucumber-junit

In Cucumber framework:
  - the test scenarios are put in a feature file which are usually are created under resources folder
  - the feature file scenario steps are connected to step definitions through @CucumberOptions "glue" option in Runner class
  - Cucumber scenario step is matched to step definition method using the text of the scenario step either with Regular Expressions or Cucumber Expressions
  - tags are the main way to control what scenario or feature files
  - Background -> the common steps for ALL scenarios of a feature file can be moved to Background steps
  - Hooks -> Step definition methods annotated with @Before and @After that are executed before/after each SCENARIO
          The annotated methods can be added into any class under Step Definitions folder but usually added into a separate class called Hooks


  Cucumber parametrized step enables the step to be used multiple times with different sets of data and prevents multiple step snippet generation

  Cucumber automatically converts matching types (String, int,double) from scenario step into corresponding parameter({string},{int},{double}) and adds it to a snippet method as a parameter:
  Ex:
      Scenario Step:           Given I have 5 pounds of cucumbers of type "Cuke" that cost me 5.99 dollars

      Generated snippet:        @Given("I have {int} pounds of cucumbers of type {string} that cost me {double} dollars")
                                public void i_have_pounds_of_cucumbers_of_type_that_cost_me_dollars(Integer int1, String string, Double double1) {

                                }

 If you need to specify information in a scenario that won't fit on a single line, you can use a DocString. (""" """)
       When you use a doctring make sure to put each triple quote on its own line.
       Ex: Scenario: Example scenario for Database
           When I send the following query
             """
                select first_name,last_name,email,address,district,city,country from customer
                join address
                on customer.address_id = address.address_id
                join city
                on address.city_id  = city.city_id
                join country
                on city.country_id = country.country_id;
              """


What are some common Cucumber exceptions?

           UndefinedStepException -  when a scenario step does not have matching step definition method

           PendingException - default exception that added to each step definition snippet

           DuplicateStepDefinitionException - happens when there are more than one step definitions with the exactly matching text

           AmbiguousStepDefinitionsException - this happens when one step has more than one matching step definitions due to parameters
                                     {string} and {word}

           CucumberException: Could not convert arguments for step [I pass this information] defined at - happens when setep definition parameter
                              type does not match the datatable


How Cucumber Background is different from Hook?
1. Purpose: Hook is used for configuration logic whereas Background is used for test logic
2. Scope: Hook is applicable to all scenarios whereas Background is applicable only to scenarios within a single feature file
3. Technical: Hook is a code (method annotated with @Before and @After) whereas the Background is part of a feature file which a text


Reporting in Cucumber Framework

- Cucumber comes with its own built-in HTML report. To enable it, we need to add the HTML plugin with the path to the file in @CucumberOptions
   e.g    plugin = {“html:target/basic-report/report.html”}

- Additionally you can enable a cloud based report with a unique url that can be easily shared with others. It needs be enabled in @CucumberOptions with publish=true option

How did you implement taking a screenshot on failure in Cucumber?

- In @After hook, we used Scenario class and checked if scenario is failed, and took a screenshot with Selenium and attached the scrrenshot file with Scenario class’s attach() method.

  e.g. public void tearDownScenario(Scenario scenario){
          if(scenario.isFailed()){
              scenario.attach(((TakesScreenshot) Driver.getDriver()).getScreenshotAs(OutputType.BYTES), “image/png”, “screenshot”);
          }
    }


How do you run your scenarios through CMD in Cucumber framework?

- Using Maven Surefire plugin and mvn test command
    e.g.
    <build>
            <pluginManagement>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <version>3.0.0</version>
                        <configuration>
                           <includes>
                               <include>CucumberRunner.java</include>
                           </includes>
                        </configuration>
                    </plugin>
                </plugins>
            </pluginManagement>
        </build>

How to run scenarios with specific tag/s through CMD in Cucumber?

mvn test -D cucumber.filter.tags=“@positive”
mvn test -D cucumber.filter.tags=“@positive and @smoke”
mvn test -D cucumber.filter.tags=“@positive or @smoke”

When you pass the tags through CMD with -D cucumber.filter.tags, it will override the Runner class’s tags if there is one.


POJO (Plain Old Java Object) - a standard Java class with all necessary boilerplate parts such as instance fields, constructors, getter/setters, toString(), hashCode() and equals() methods

Lombok is used to reduce boilerplate code for classes and generate POJOs easily, e.g., it can generate getters and setters for those objects automatically by using Lombok annotations.
The easiest way is to use the @Data annotation.
In our Framework we used Lombok annotation @Data for our Page classes to automatically generate getter methods to be accessible outside in our Test code.

Cucumber Data Table - a cucumber feature that enables table-style data to be passed from a SINGLE step of a Cucumber scenario
                                into the step definition method
             Example:           Given I am on homepage
                                When I pass this information
                                | John | Doe | 12/09/1999 | 235-345-1234 | 322-09-6322 | 123 Main St, Vienna VA 22056 |
              The DataTable is added to the cucumber step definition method as a parameter, we simply need to replace it with corresponding
              Java data structure for automatic transformation. The allowed types are List<E>, List<List<E>>, List<Map<K,V>>,
               Map<K,V>  Map<K, List<V>> where E,K,V must be a String, Integer, Float, Double, Byte, Short, Long

           When Cucumber converts the DataTable into corresponding Java data structures (List, Map), it creates
           an unmodifiable versions of these data structures.
           If you need to modify, you need to convert into a modifiable type.

DocString
If you need to specify information in a scenario that won’t fit on a single line, you can use a DocString. (“”" “”")
       When you use a doctring make sure to put each triple quote on its own line.
       Ex: Scenario: Example scenario for Database
           When I send the following query
             “”"
                select first_name,last_name,email,address,district,city,country from customer
                join address
                on customer.address_id = address.address_id
                join city
                on address.city_id  = city.city_id
                join country
                on city.country_id = country.country_id;
              “”"

What is the difference between Cucumber Data Table and Scenario Outline’s Examples table?

Data Table belongs to a single step of a scenario whereas Examples table belongs to the entire Scenario Outline.
We use Data Table when we want to pass table-style data (multiple sets of data) into a single step, on other words instead of passing large number of parameters separately we can pass them as single data structure like List, Map, etc
We use Examples table with Scenario Outline when we want to run the same scenario multiple times with different input.


Cucumber comes with built-in Junit 4 by default and it does not have soft assertions.
Hence we can use AssertJ library to implement soft assertions:
           Ex:
                SoftAssertions softAssertions = new SoftAssertions();
                softAssertions.assertThat(“actual”).isEqualTo(“expected”);
                softAssertions.assertThat(“actual2”).isEqualTo(“expected2");
                softAssertions.assertThat(“actual3”).isEqualTo(“expected3");
                softAssertions.assertAll();
Parallel and cross-browser tests can be implemented in following ways:
1. Selenium Grid: server that automatically runs your tests in distributed mode on multiple browsers,operating systems, platforms
   Requires complex installation and configuration.
   I used Selenium Grid by sending the framework tests to a remote server url using RemoteWebDriver.
2. Using third-party cloud providers such as SauceLabs, BrowserStack.
   Requires subscription and costs money.
3. Implement running cross-browser and parallel tests natively in your framework.
   Requires powerful server to run the tests.
 How to implement parallelism in Cucumber framework?
 We can enable parallel test in Cucumber natively with JUnit.
 But we need to remember that with this option you can run only FEATURES in parallel.
  If there is a need for running SCENARIOS in parallel, you can incorporate TestNG , but that requires extra configuration and setup.
               Steps to implement running parallel Features in Cucumber with Junit:
                1.Give the scope of the feature files that you want to run in parallel in your runner class
                     features = “src/test/resources”
                  Optionally create a separate folder for feature files that you want to run in parallel and indicate that path
                        features = “src/test/resources/parallel”
                2.Add these 2 options under the <configuration> tag of Maven Surefire plugin:
                       <parallel>methods</parallel>
                       <useUnlimitedThreads>true</useUnlimitedThreads>
                3. If you want to limit the threads:
                  <parallel>methods</parallel>
                   <threadCount>6</threadCount>
                4. Run the tests thru command line with mvn test command
                TDD (Test Driven Development) - TestNG based framework
                BDD (Behavior Driven Development) - Cucumber+Junit based framework
  Tell me about your framework?
  General description -> components -> architecture -> more details (packages, classes)
  It is a Cucumber BDD test automation framework allows us to write test cases in Gherkin format
  as Cucumber scenarios which is understandable to all participants. The framework tech stack includes Java, Cucumber, Gherkin, JUnit, Selenium, Maven, Faker, Lombok, AssertJ.
  My framework is built with using Page Object Model design pattern for easy maintenance and scalability. Besides, I also used Page Factory pattern for my page classes and Singleton pattern for my Driver class.
  My framework structure consists of packages for page classes, runner classes, step definition classes and hooks, utilities and features files. In my framework the cucumber feature files are
  connected to the step definition classes through a runner class where all test run configuration is added.
  Cucumber BDD Framework components:
    Java - programming language to write code
    Selenium - to automate UI scenarios
    Junit - organize, configure, and execute tests
    Maven - define the project structure, manage dependencies, run tests through command line
    Faker - generate mock data for data driven testing
    Lombok - generate getter and setters automatically for page classes
    AssertJ - enable soft assertions since Junit does not offer them
    .gitignore file - to exclude non-project related files from being version controlled (tracked and pushed to GitHub)
    config.properties file - to store project’s global variables such as env variables, usernames, passwords, paths, etc.
    Utility Classes - classes that support our automated tests
    Reports - are implemented with Cucumber’s own built in HTML
  Architecture:
       -Design patterns used: Page Object Model and Page Factory, Singleton
       -OOP Principles used:
       - Encapsulation - I used it my page classes by making webelements private and provide public getters
       - Inheritance - I used it in my page classes by creating a parent class and adding all common webelements there and extending subclasses from that super class
       - I haven’t implemented Abstraction or Polymorphism in any of my code since I had no need for them. But I can give you examples of them in my framework code.
         Polymorphism ->  WebDriver driver = new ChromeDriver()
         Abstraction -> WebDriver, WebElement, Alert, JavaScriptExecutor, TakesScreenshot
  Types of tests the framework supports:
    Functional,
    Smoke,
    Regression,
    Integration,
    UI, API, DB
    Cross Browser,
    Headless,
    Parallel,
    Data-Driven tests
    End-to-end tests



    Sharing data between Cucumber steps:

    Sharing data between cucumber step definition methods in the same or different class is a common challenge in Cucumber framework.
    We can use Cucumber pico container dependency for that purpose and use Depenedency Injection concept.
    Steps:
    1. Add the cucumber-picocontainer dependency:
              <dependency>
                   <groupId>io.cucumber</groupId>
                   <artifactId>cucumber-picocontainer</artifactId>
                   <version>7.13.0</version>
               </dependency>
    2. Create a common class for shared data and add the variables there with getters and setters (optionally use @Data annotation from Lombok)
         @Data
         public class SharedData {

             private String password;
             private String username;

         }

    3. In a Step definition class add an object of SharedData class as instance variable and initialize it in a constructor:

        public class ExampleStepDefs {
           SharedData sharedData;

             public ExampleStepDefs(SharedData sharedData){
                this.sharedData = sharedData;
             }
        }

    4. Use setters and getters in a step defintion methods to initialize and get the shared data:

         @Given("I enter random valid username and password")
            public void i_enter_random_valid_username_and_password() {

                sharedData.setPassword(new Faker().internet().password());  //initialize the password

                Driver.getDriver().finsElement(By.xpath("passwordField")).sendKeys(sharedData.getPassword()); // use it

            }
    5. Share the data in the same or different step definition class's method with getter:

       @Then("I should have the same username and password in the database")
           public void i_should_have_the_same_username_and_password_in_the_database() {
             String dbUsername =   DBUtils.get("some SQL");
              Assert.assertEquals(sharedData.getUsername(), dbUsername); //sharedData.getUsername() is the shared data that is initialized in the other step

           }
